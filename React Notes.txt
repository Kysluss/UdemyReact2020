Three tenants of react componetns

Componet Nesting - A component can be shown inside of another
Componetn Reusability - We want to make components that can be easily reused throughout the application
component Configuration - We want to be able to configure a component when it is created

semantic-ui.com = A great website for some basic styling.  A lot of basic things that most people use.

Easiest to utilize semantic ui cdn to get a link to the CDN where everything is already set up

Faker JS - library to help you generate data for your projects

Benefits of class based components
	- Easier organization of code
	- Can use the "state" system in React (data, events, user input, etc)
	- Understands lifecycle events (app startup, component is rendered, etc)

You can "fake" your GPS location using Chrome Dev Tools.
	- While inside of dev tools, hit escape.  From the options menu (the ...), chose sensors
	- Within sensors, you can use one of the geolocation override options

Timeline of what happens in a user's browser
	- JS file loaded by browser
	- App component gets created
	- We call geolocation service
	- Immediately after (geolocation has not finished yet), JSX is returned by app component and is rendered as HTML
	- We get a result from geolocation

Desired timeline:
Timeline of what happens in a user's browser
	- JS file loaded by browser
	- App component gets created
	- We call geolocation service
	- Immediately after (geolocation has not finished yet), JSX is returned by app component and is rendered as HTML
	- We get a result from geolocation
	- Tell componet to re-render itself with the geolocation information

Rules of a class based component
	- Must be a Javascript Class
	- Must extend (subclass) React.Component
	- Must define a 'render' method that returns some amount of JSX

Rules of State
	- Only usable with class based components
	- You will confuse props with state
	- State is a JS object that containes data relevant to a component
	- Updating state on acomponent causes the comoponent to (almost) instantly re-render
	- State must be initailized when a component is created
	- State can only be updated using the function setState

The last rule is very important.  You can only update state using setState.  This is the most common mistake that people make.  It's an object and you can update it directly, but then components won't re-render and other things won't update appropriately.

When you have a class based component, there is a constructor method that you can override to do some initial setup.  If you override the constructor function, you NEED to call the super function which will call the parent's constructor function.

Example: constructor(props) {
	super(props);
	// Other stuff here
}

Never have initalization code inside of the render method.  It should only create JSX.  The render method gets called a lot, and you don't want your initialization code to be called numerous times.

Component Lifecycle Methods
	- constructor
	- render
	- componentDidMount called after the component is rendered to the screen
	- componentDidUpdate called after the component updates itself (like after setState)
	- componentWillUnmount called when for some reason, the component will no longer be showed on the screen.  Good for cleanup of the component